#!/bin/bash
#
#  Command-line test client for sms-gateway.

export LC_ALL="C"
set -euo pipefail

# Source shared functions, default settings, and public keys for encryption
LIB_DIR="$(dirname "$(realpath "$0")")/lib"
. "$LIB_DIR/settings.sh"

# The functions in kafka-lib.sh will display this
USAGE="[[[[[[[PUBFILE] CLIENT] CORREL] DEADLINE] SENDER] RECIPIENT] FILE]

  Send an SMS over Kafka to the SMS Gateway

  POSITIONAL PARAMS
   PUBFILE    Public key file to encrypt with [lib/\${CLIENT}.pub]
   CLIENT     Client on whose behalf you are sending [$CLIENT]
   CORREL     Unique correlation ID within the CLIENT [C\${RANDOM}]
   DEADLINE   Expiry of the SMS in ISO UTC [$DEADLINE]
   SENDER     Sender name or number [$SENDER]
   RECIPIENT  Destination number [$RECIPIENT]
   FILE       File to be sent or '-' for stdin"

# Source the libraries
. "$LIB_DIR/kafka-lib.sh"
. "$LIB_DIR/crypto-lib.sh"

# Parse the optional arguments
(( $# == 7 )) && PUBKEY="$1"    && shift || true
(( $# == 6 )) && CLIENT="$1"    && shift || true
(( $# == 5 )) && CORREL="$1"    && shift || true
(( $# == 4 )) && DEADLINE="$1"  && shift || true
(( $# == 3 )) && SENDER="$1"    && shift || true
(( $# == 2 )) && RECIPIENT="$1" && shift || true
(( $# == 1 )) && FILE="$1"      && shift || FILE='-'

# Read the PUBKEY from PUBFILE
PUBKEY="$(cat "$PUBFILE")" || err_exit "failed to read pubkey file: $PUBFILE"

# Produce the encrypted payload for CLIENT
PAYLOAD="$(encrypted_sms "$PUBKEY" "$RECIPIENT" "$SENDER" "$FILE")" || err_exit "failed to produce encrypted SMS"

# Dump the standard diags
dump_diags
emit "PUBFILE   = $PUBFILE"
emit "CLIENT    = $CLIENT"
emit "CORREL    = $CORREL"
emit "DEADLINE  = $DEADLINE"
emit "SENDER    = $SENDER"
emit "RECIPIENT = $RECIPIENT"

# Produce the message and pipe it onto the topic
printf '{ "client-id": "%s", "correl-id": "%s", "deadline": "%s", "payload": "%s" }\n' \
	"$CLIENT" "$CORREL" "$DEADLINE" "$PAYLOAD" |
kcat_send
